name: Build Windows

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        
    - name: Install dependencies
      run: |
        # 安装必要的依赖
        choco install -y git cmake ninja libusb
        # 安装readline (通过MSYS2)
        choco install -y msys2
        $msys2Path = "C:\tools\msys64\usr\bin\bash.exe"
        & $msys2Path -lc "pacman -S --noconfirm mingw-w64-x86_64-readline"
        
    - name: Build Proxmark3 CLI
      run: |
        git clone https://github.com/Proxmark/proxmark3.git
        cd proxmark3
        mkdir build
        cd build
        # 使用Ninja构建系统
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DREADLINE_INCLUDE_DIR=C:/tools/msys64/mingw64/include -DREADLINE_LIBRARY=C:/tools/msys64/mingw64/lib/libreadline.dll.a
        if ($LASTEXITCODE -ne 0) { 
          Write-Error "CMake failed"
          exit 1 
        }
        cmake --build .
        if ($LASTEXITCODE -ne 0) { 
          Write-Error "Build failed"
          exit 1 
        }
        echo "PROXMARK_PATH=$env:GITHUB_WORKSPACE\proxmark3\build\client\proxmark3.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
    - name: Check Proxmark3 CLI
      run: |
        if (-not (Test-Path $env:PROXMARK_PATH)) {
          Write-Error "proxmark3.exe not found at $env:PROXMARK_PATH"
          exit 1
        }
        Write-Host "proxmark3.exe found at $env:PROXMARK_PATH"
        
    - name: Build GUI
      run: |
        # 修改代码中的路径
        (Get-Content proxmark3.cpp) -replace '"proxmark3.exe"', "`"$env:PROXMARK_PATH`"" | Set-Content proxmark3.cpp
        # 使用qmake生成Makefile
        qmake -spec win32-msvc
        if ($LASTEXITCODE -ne 0) { 
          Write-Error "qmake failed"
          exit 1 
        }
        # 使用nmake构建
        nmake release
        if ($LASTEXITCODE -ne 0) { 
          Write-Error "nmake failed"
          exit 1 
        }
        
    - name: Check GUI executable
      run: |
        if (-not (Test-Path "release\Proxmark3GUI.exe")) {
          Write-Error "Proxmark3GUI.exe not found in release directory"
          exit 1
        }
        Write-Host "Proxmark3GUI.exe found in release directory"
        
    - name: Package
      run: |
        mkdir package
        copy release\Proxmark3GUI.exe package\
        copy $env:PROXMARK_PATH package\
        copy "C:\Program Files\LibUSB-Win32\bin\libusb0.dll" package\
        # 使用windeployqt收集依赖
        windeployqt --release --force package\Proxmark3GUI.exe
        # 创建压缩包
        7z a Proxmark3GUI-Windows.zip .\package\*
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Proxmark3GUI-Windows
        path: Proxmark3GUI-Windows.zip
        retention-days: 30
        
    - name: Debug build directory
      if: failure()
      run: |
        Write-Host "=== Current directory contents ==="
        Get-ChildItem -Recurse | Format-Table Name, Length, LastWriteTime
        Write-Host "=== Environment variables ==="
        Get-ChildItem Env: | Format-Table Name, Value
